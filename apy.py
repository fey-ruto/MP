# -*- coding: utf-8 -*-
"""apy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HbgbhTjkxNK1N9XfffsmBz8wE9_lp2xh
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import plotly.express as px

# Set page config
st.set_page_config(page_title="Maize Crop Prediction in Kenya", layout="wide")

@st.cache_data
def load_data():
    # Replace this with the actual path to your data in the GitHub repository
    data_url = "Food_Prices_Kenya.csv"
    df = pd.read_csv(data_url)
    return df

def preprocess_data(df):
    df['Date'] = pd.to_datetime(df['Date'])
    df['Year'] = df['Date'].dt.year
    df['Month'] = df['Date'].dt.month
    
    le = LabelEncoder()
    df['Regions'] = le.fit_transform(df['Regions'])
    
    df = df.fillna(df.mean())
    
    features = ['Year', 'Month', 'Regions', 'Amount Produced', 'Annual Rainfall', 'Annual Temperature']
    target = 'Price'
    
    return df[features], df[target], le

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    predictions = model.predict(X_test)
    mae = mean_absolute_error(y_test, predictions)
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    r2 = r2_score(y_test, predictions)
    
    return model, mae, rmse, r2

def main():
    st.title("Maize Crop Prediction in Kenya")

    # Load and preprocess data
    df = load_data()
    X, y, le = preprocess_data(df)

    # Train model
    with st.spinner("Training model..."):
        model, mae, rmse, r2 = train_model(X, y)

    st.success("Model trained successfully!")
    st.write(f"Mean Absolute Error: {mae:.2f}")
    st.write(f"Root Mean Squared Error: {rmse:.2f}")
    st.write(f"R-squared Score: {r2:.2f}")

    # User input for prediction
    st.header("Make a Prediction")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        region = st.selectbox("Select Region", df['Regions'].unique())
        year = st.number_input("Enter Year", min_value=2000, max_value=2100, value=2024)
    
    with col2:
        month = st.selectbox("Select Month", range(1, 13))
        amount_produced = st.number_input("Amount Produced (tonnes)", min_value=0, value=10000)
    
    with col3:
        annual_rainfall = st.number_input("Annual Rainfall (mm)", min_value=0, value=1000)
        annual_temperature = st.number_input("Annual Temperature (Â°C)", min_value=-20, max_value=50, value=25)

    if st.button("Predict"):
        encoded_region = le.transform([region])[0]
        input_data = np.array([[year, month, encoded_region, amount_produced, annual_rainfall, annual_temperature]])
        prediction = model.predict(input_data)[0]
        
        st.success(f"Predicted Price: {prediction:.2f} KES")

        # Visualizations
        st.header("Historical Data Visualization")
        
        fig_price = px.line(df, x='Date', y='Price', title='Historical Maize Prices')
        st.plotly_chart(fig_price)

        fig_rainfall = px.bar(df, x='Date', y='Annual Rainfall', title='Annual Rainfall')
        st.plotly_chart(fig_rainfall)

        fig_temp = px.line(df, x='Date', y='Annual Temperature', title='Annual Temperature')
        st.plotly_chart(fig_temp)

if __name__ == "__main__":
    main()
